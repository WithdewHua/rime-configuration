# Rime schema
# encoding: utf-8

# 方案说明
schema:
  schema_id: double_pinyin
  name: 悬墨 - 自然码双拼
  version: "2024-07-20"
  author:
    - 自然码发明人：周志农
    - 雾凇拼音：iDel
    - 白霜拼音：gaboolic
    - 魔然辅筛：ksqsf
    - 万象：amzxyz
    - 悬墨：WithdewHua <i@10101.io>
  description: |
    悬墨 - 基于雾凇/白霜拼音，结合「魔然·輔篩」方案
    https://github.com/WithdewHua/rime-configuration
  dependencies:
    - melt_eng                                                  # 英文输入，作为次翻译器挂载到拼音方案
    - radical_pinyin                                            # 部件拆字，作为反查挂载到拼音方案


# 开关
# 鼠须管 0.16 后，用快捷键切换时的提示文字由 states 定义
# states: 方案选单显示的名称。可以注释掉，仍可以通过快捷键切换。
# reset: 默认状态。 注释掉后，切换窗口时不会重置到默认状态。
switches:
  - name: ascii_mode
    states: [ 中, A ]
    reset: 0
  - name: ascii_punct # 中英标点
    states: [ ¥, $ ]
    reset: 0
  - name: traditionalization
    states: [ 简, 繁 ]
    reset: 0
  - name: emoji
    states: [ 💀, 😄 ]
    reset: 1
  - name: full_shape
    states: [ 半角, 全角 ]
    reset: 0
  - name: chaifen
    states: [ 拆, 扌斥 ]
    reset: 0
  - name: pinyinhint
    states: [ 🔇, 🔊 ]
    reset: 0

# 输入引擎
engine:
  processors:
    - key_binder
    - lua_processor@*moran_pin*pin_processor                    # 【魔然】置顶/加词
    - lua_processor@select_character                            # 以词定字
    - ascii_composer
    - recognizer
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - affix_segmentor@radical_lookup
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    # - script_translator
    - lua_translator@date_translator                            # 时间、日期、星期
    - table_translator@custom_phrase                            # 自定义短语 custom_phrase_double_pinyin.txt
    - table_translator@melt_eng                                 # 英文输入
    - table_translator@radical_lookup                           # 拆字反查
    - lua_translator@unicode                                    # Unicode
    - lua_translator@number_translator                          # 数字大写
    - lua_translator@*moran_aux_translator                      # 【魔然】辅筛
    - lua_translator@*moran_pin*panacea_translator              # 【魔然】置顶/加词
  filters:
    - reverse_lookup_filter@radical_reverse_lookup              # 拆字滤镜
    - lua_filter@reduce_english_filter                          # 降低部分英语单词在候选项的位置
    - lua_filter@autocap_filter                                 # 英文大写转换
    - lua_filter@insert_space_between_words                     # 英文词前后插入空格
    - lua_filter@*moran_hint_filter@auxfilter                   # 【魔然】辅助码提示
    - lua_filter@*moran_fix_filter                              # 【魔然】 fix 过滤
    - lua_filter@*moran_pin*pin_filter                          # 【魔然】置顶/加词过滤
    - simplifier@emoji                                          # Emoji
    - simplifier@traditionalize                                 # 简繁切换
    - simplifier@chaifen                                        # 拆字
    - simplifier@pinyinhint                                     # 拼音提示
    - uniquifier                                                # 去重

# 标点符号
# punctuator 下面有三个子项：
#   full_shape 全角标点映射
#   half_shape 半角标点映射
#   symbols    Rime 的预设配置是以 '/' 前缀开头输出一系列字符，自定义的 symbols_caps_v.yaml 修改成了 'V' 开头。
punctuator:
  # full_shape:
  #   __include: default:/punctuator/full_shape                 # 从 default.yaml 导入配置
  # half_shape:
  #   __include: default:/punctuator/half_shape                 # 从 default.yaml 导入配置
  # symbols:
  #   __include: symbols_caps_v:/symbols                        # 从 symbols_caps_v.yaml 导入配置
  import_preset: default

# 处理符合特定规则的输入码，如网址、反查
recognizer:
  import_preset: default                                        # 从 default.yaml 继承通用的
  # 再增加方案专有的：
  patterns:  
    punct: "^V([0-9]|10|[A-Za-z]+)$"                            # 响应 symbols_caps_v.yaml 的 symbols
    radical_lookup: "^L[a-z]+$"                                 # 响应反查
    unicode: "^U[a-f0-9]+"                                      # 响应 Unicode
    number: "^R[0-9]+[.]?[0-9]*"                                # 响应 number_translator

# 从 default 继承快捷键
key_binder:
  import_preset: default                                        # 从 default.yaml 继承通用的
  # bindings:                                                   # 也可以再增加方案专有的

# 引入模型
grammar:
  language: wanxiang-lts-zh-hans                                # 万象语法模型
  collocation_max_length: 5
  collocation_min_length: 2

# 拼写设定
speller:
  # 如果不想让什么标点直接上屏，可以加在 alphabet，或者编辑标点符号为两个及以上的映射
  alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA`
  # initials 定义仅作为始码的按键，排除 ` 让单个的 ` 可以直接上屏
  initials: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA
  # 第一位<空格>是拼音之间的分隔符；第二位<'>表示可以手动输入单引号来分割拼音
  delimiter: " '"                                               
  algebra:
    - erase/^xx$/
    - derive/^([jqxy])u$/$1v/
    - derive/^([aoe])([ioun])$/$1$1$2/
    - xform/^([aoe])(ng)?$/$1$1$2/
    - xform/iu$/Ⓠ/
    - xform/[iu]a$/Ⓦ/
    - xform/[uv]an$/Ⓡ/
    - xform/[uv]e$/Ⓣ/
    - xform/ing$|uai$/Ⓨ/
    - xform/^sh/Ⓤ/
    - xform/^ch/Ⓘ/
    - xform/^zh/Ⓥ/
    - xform/uo$/Ⓞ/
    - xform/[uv]n$/Ⓟ/
    - xform/(.)i?ong$/$1Ⓢ/
    - xform/[iu]ang$/Ⓓ/
    - xform/(.)en$/$1Ⓕ/
    - xform/(.)eng$/$1Ⓖ/
    - xform/(.)ang$/$1Ⓗ/
    - xform/ian$/Ⓜ/
    - xform/(.)an$/$1Ⓙ/
    - xform/iao$/Ⓒ/
    - xform/(.)ao$/$1Ⓚ/
    - xform/(.)ai$/$1Ⓛ/
    - xform/(.)ei$/$1Ⓩ/
    - xform/ie$/Ⓧ/
    - xform/ui$/Ⓥ/
    - xform/(.)ou$/$1Ⓑ/
    - xform/in$/Ⓝ/
    - xlit/ⓆⓌⓇⓉⓎⓊⒾⓄⓅⓈⒹⒻⒼⒽⓂⒿⒸⓀⓁⓏⓍⓋⒷⓃ/qwrtyuiopsdfghmjcklzxvbn/
    # 中英文混输，见 https://github.com/iDvel/rime-ice/issues/230
    - xform/"//


# ------------
# translators
# ------------
# 主翻译器，拼音
translator:
  dictionary: rime_cn                                           # 挂载词库 rime_cn.dict.yaml
  prism: double_pinyin                                          # 多方案共用一个词库时，为避免冲突，需要用 prism 指定一个名字。
  contextual_suggestions: true                                  # 配合万象模型
  max_homophones: 7                                             # 最大同音字，配合万象模型
  max_homographs: 7                                             # 最大同形字，配合万象模型
  initial_quality: 1.2                                          # 拼音的权重应该比英文大
  preedit_format:                                               # preedit_format 影响到输入框的显示和“Shift+回车”上屏的字符
    - xform/([bpmnljqxy])n/$1in/
    - xform/(\w)g/$1eng/
    - xform/(\w)q/$1iu/
    - xform/([gkhvuirzcs])w/$1ua/
    - xform/(\w)w/$1ia/
    - xform/([dtnlgkhjqxyvuirzcs])r/$1uan/
    - xform/(\w)t/$1ve/
    - xform/([gkhvuirzcs])y/$1uai/
    - xform/(\w)y/$1ing/
    - xform/([dtnlgkhvuirzcs])o/$1uo/
    - xform/(\w)p/$1un/
    - xform/([jqx])s/$1iong/
    - xform/(\w)s/$1ong/
    - xform/([jqxnl])d/$1iang/
    - xform/(\w)d/$1uang/
    - xform/(\w)f/$1en/
    - xform/(\w)h/$1ang/
    - xform/(\w)j/$1an/
    - xform/(\w)k/$1ao/
    - xform/(\w)l/$1ai/
    - xform/(\w)z/$1ei/
    - xform/(\w)x/$1ie/
    - xform/(\w)c/$1iao/
    - xform/([dtgkhvuirzcs])v/$1ui/
    - xform/(\w)b/$1ou/
    - xform/(\w)m/$1ian/
    - xform/([aoe])\1(\w)/$1$2/
    - "xform/(^|[ '])v/$1zh/"
    - "xform/(^|[ '])i/$1ch/"
    - "xform/(^|[ '])u/$1sh/"
    - xform/([jqxy])v/$1u/
    - xform/([nl])v/$1ü/

# 次翻译器，英文
melt_eng:
  dictionary: melt_eng                                          # 挂载词库 melt_eng.dict.yaml
  enable_sentence: false                                        # 禁止造句
  enable_user_dict: false                                       # 禁用用户词典
  initial_quality: 1.1                                          # 初始权重
  comment_format:                                               # 自定义提示码
    - xform/.*//                                                # 清空提示码

# 自定义短语
custom_phrase:
  dictionary: ""
  user_dict: custom_phrase_double                               # 需要手动创建 custom_phrase_double.txt 文件
  db_class: stabledb
  enable_completion: false                                      # 补全提示
  enable_sentence: false                                        # 禁止造句
  initial_quality: 99                                           # custom_phrase 的权重应该比 pinyin 和 melt_eng 大

# 部件拆字反查
radical_lookup:
  tag: radical_lookup
  dictionary: radical_pinyin
  enable_user_dict: false
  # 反查前缀（反查时前缀会消失影响打英文所以设定为两个字母，或可改成一个非字母符号），与 recognizer/patterns/radical_lookup 匹配
  prefix: "L"
  tips: "  〔拆字〕"
  comment_format:
    - erase/^.*$//

# Lua 配置: 日期、时间、星期、ISO 8601、时间戳的触发关键字
date_translator:
  date: date                                                    # 日期： 2022-11-29
  time: time                                                    # 时间： 18:13
  week: week                                                    # 星期： 星期二
  datetime: datetime                                            # ISO 8601： 2022-11-29T18:13:11+08:00
  timestamp: timestamp                                          # 时间戳： 1669716794


# ------------
# filters
# ------------
# Lua 配置: 降低部分英语单词在候选项的位置。
# 详细介绍 https://dvel.me/posts/make-rime-en-better/#短单词置顶的问题
# 正常情况： 输入 rug 得到 「1.rug 2.如果 …… 」
# 降低之后： 输入 rug 得到 「1.如果 2.rug …… 」
# 几种模式：
# all     降低脚本内置的单词（所有 3~4 位长度、前 2~3 位是完整拼音、最后一位是声母），words 作为自定义的额外补充
# custom  完全自定义，只降低 words 里的
# none    不降低任何单词，相当于没有启用这个 Lua
# （匹配的是编码，不是单词）
reduce_english_filter:
  mode: custom  # all | custom | none
  idx: 2        # 降低到第 idx 个位置
  # 自定义的单词列表，示例列表没有降低部分常用单词，如 and cat mail Mac but bad shit ……
  words: [
    aid, ann,
    bail, bait, bam, band, bans, bat, bay, bend, bent, benz, bib, bid, bien, biz, boc, bop, bos, bud, buf, bach, bench, bush,
    cab, cad, cain, cam, cans, cap, cas, cef, chad, chan, chap, chef, cher, chew, chic, chin, chip, chit, coup, cum, cunt, cur, couch,
    dab, dag, dal, dam, dent, dew, dial, diet, dim, din, dip, dis, dit, doug, dub, dug, dunn,
    fab, fax, fob, fog, foul, fur,
    gag, gail, gain, gal, gam, gaol, ged, gel, ger, guam, gus, gut,
    hail, ham, hank, hans, hat, hay, heil, heir, hem, hep, hud, hum, hung, hunk, hut, hush,
    jim, jug,
    kat,
    lab, lad, lag, laid, lam, laos, lap, lat, lax, lay, led, leg, lex, liam, lib, lid, lied, lien, lies, linn, lip, lit, liz, lob, lug, lund, lung, lux, lash, loch, lush,
    mag, maid, mann, mar, mat, med, mel, mend, mens, ment, mil, mins, mint, mob, moc, mop, mos, mot, mud, mug, mum, mesh,
    nap, nat, nay, neil, nib, nip, noun, nous, nun, nut, nail, nash,
    pac, paid, pail, pain, pair, pak, pal, pam, pans, pant, pap, par, pat, paw, pax, pens, pic, pier, pies, pins, pint, pit, pix, pod, pop, pos, pot, pour, pow, pub, pinch, pouch,
    rand, rant, rent, rep, res, ret, rex, rib, rid, rig, rim, rub, rug, rum, runc, runs, ranch,
    sac, sail, sal, sam, sans, sap, saw, sax, sew, sham, shaw, shin, sig, sin, sip, sis, suit, sung, suns, sup, sur, sus,
    tad, tail, taj, tar, tax, tec, ted, tel, ter, tex, tic, tied, tier, ties, tim, tin, tit, tour, tout, tum,
    wag, wand, womens, wap, wax, weir, won,
    yan, yen,
    zach
  ]

# 部件拆字滤镜
radical_reverse_lookup:
  tags: [ radical_lookup ]
  # dictionary 为拼音标注来源。目前是显示本方案词库的注音，可去部件拆字方案下载更全的、带声调的、已编译好的词典
  # https://github.com/mirtlecn/rime-radical-pinyin?tab=readme-ov-file#%E5%8F%8D%E6%9F%A5%E5%B8%A6%E5%A3%B0%E8%B0%83%E6%B3%A8%E9%9F%B3
  dictionary: rime_cn
  # comment_format:     # 自定义 comment，例如在左右加上括号
  #  - xform/^/(/
  #  - xform/$/)/

# Emoji
emoji:
  opencc_config: emoji.json
  option_name: emoji

# 简繁切换
traditionalize:
  option_name: traditionalization
  opencc_config: s2t.json                                       # s2t.json | s2hk.json | s2tw.json | s2twp.json
  tips: none                                                    # 转换提示: all 都显示 | char 仅单字显示 | none 不显示。
  excluded_types: [ radical_lookup ]                            # 不转换反查（两分拼字）的内容

# 拆字
chaifen:
  option_name: chaifen
  opencc_config: moran_chaifen.json
  tips: char
  show_in_comment: true
  inherit_comment: true
  comment_format:
    - "xform/-/ /"
    - "xform/〕〔/｜/"

pinyinhint:
  option_name: pinyinhint
  opencc_config: moran_pinyinhint.json
  tips: char
  show_in_comment: true


# -------------
# custom
# -------------
# 魔然辅筛配置
moran:
  # 預取個數
  # 設置爲小於等於 0 的數相當於無限制。
  # 設置爲正數時：數字越小，速度越快，被輔到的字越少；
  #               數字越大，速度越慢，能被輔到字就越多。
  # 默認爲無限制。
  # 如果在某些性能較低的設備上使用時感到卡頓，可以設置爲 50 或更小的數字。
  # 如果感到被輔生僻字過多，也可以考慮設置爲較小的數字。
  prefetch: -1

  # 挂接的 fixed 码表简码提示
  quick_code_indicator: "⚡"        
  # 固定一简或者二简                             
  fix:                                                          
    d: 的
    l: 了
    j: 就

  # 首選固定爲句子，使得在輸入長句時，首選的長度不會跳變
  # 例如，輸入「不太理解」輸入到 "bu tl l" 時，
  # 若爲 false，則首選可能是「郶」（l 輔助碼生效）
  # 若爲 true，則首選是「不太冷」（bu tl l 被視作雙拼），次選可能是「郶」（l 輔助碼生效）
  sentence_priority: true
  # 句子優先的生效長度
  # 只有在句子輸出大於該長度時，句子才會被前置。
  # 例如，要輸入「哪個」時輸入 nagek，首先被嘗試理解爲 na'ge'k，輸出三個字。
  # 若設爲 4，就可以保證 nagek 的首选出現「哪個」，而不是三個字的候選。
  # 若設爲 0，則表示不加限制、永遠開啓。
  sentence_priority_length: 0

  # 四碼時是否優先單字
  # ※ 該設置優先級高於 word_over_char_tolerance
  #    若本選項爲 true，即使 word_over_char_tolerance 大於 0，四碼仍然是單字優先。
  char_priority: false

  # 允許多少詞出現在被輔候選之前，影響輸入長度爲偶數的情況
  # 被輔單字太多的情況下，例如 ji'dj li'hl 等，允許一些詞出現在這些字之前。
  # 若設爲 0，相當於被輔候選永遠在最前，輸入 xibk 時首選會是「兮」而不是細胞。
  # 若設爲 1，相當於被輔候選會出現在次選。
  # 必須是正整數。
  #
  # ※ 該設置優先級低於 single_char_input_len。
  #    如果本設置大於 0，而 single_char_input_len=4 ，則
  word_over_char_tolerance: 2
  # 是否允許被輔候選和插入詞語之間調頻
  # 僅在當 word_over_char_tolerance > 0 時有效
  # 如 doxx 存在「多謝」和「多」兩個候選，具體順序依據用戶使用頻率而定。
  # 若設置爲 true，「多謝」可能出現在「多」之前，也可能出現在「多」之後。
  # 若設置爲 false，則詞語無條件出現在被輔候選之前。
  word_over_char_adaptive: true

  # 輸入輔助碼時，原來匹配的首選後移
  # ※ 該選項也對詞語生效。
  #
  # 例如，假設輸入 he 的首選是「喝」，
  # 如果進一步輸入 k，有很大可能意味着我們想找一個不是「喝」的字。
  # 那麼「喝」應該被延遲到若干選項之後。
  #
  # 注意，該功能不影響僅輸入一碼或二碼時的行爲，
  # 即若 h 的首選是「喝」，則輸入 he 的首選依然是「喝」。
  # 若需要改變此行爲，可以參照上方的一二級簡碼設置。
  #
  # 若爲 true，則原來匹配的候選被延遲到若干選項之後。
  # （延遲候選的個數由 aux_priority_defer 指定。）
  # 若爲 false，則 hek 一定仍然是「喝」。
  aux_priority: true
  # 延遲多少位
  aux_priority_defer: 2
  # 設定 aux_priority 作用時的輔助碼長度
  # 若爲 1，表示允許 he -> hek 時降權「喝」字，即從二碼輸入一碼到三碼時。
  # 若爲 2，表示允許 hek -> hekh 時降權「喝」字，即從三碼輸入一碼到四碼時。
  # 其他任何數字都是無效輸入。
  aux_priority_length: 1
  # 如果候選被後移，增加一個提示符。
  aux_priority_indicator: "▾"

  # 輔助碼作用位置
  # 注：輔篩模式無論如何都是在 *首個詞語* 上進行篩選。
  # 本配置只影響取用哪個輔助碼
  # first：首字
  # last：末字
  # any：任意字
  aux_position: any

  # 輔助碼提示
  # 格式爲：<匹配的輔助碼> ¦ <詞典中的輔助碼>
  # 該功能不顯示拆分，建議使用 Ctrl+i 顯示單字拆分
  enable_aux_hint: true

  # 「置頂」功能相關設置
  # 輸入時通過快捷鍵 Ctrl+t 可以將高亮顯示的候選置頂，被置頂的候選位置固定，不再參與調頻
  # 對同一輸入碼最高支持8個置頂詞，當嘗試置頂第9個詞時，最早被置頂的詞將會失效
  pin:
    # 「置頂」功能開關
    enable: true
    # 置頂詞提示符
    indicator: "📌"
    # 「萬靈藥」加詞功能
    # 通過輸入 「編碼A」//「編碼B」 實現造詞功能，編碼A是這個新詞的新編碼 編碼B是目前可以打出該詞的編碼
    # 例如 輸入 tnfb 不能得到「頭腦風暴」這一候選， 此時我們可以輸入 tnfb//tbnkfgbk 按下空格 讓「頭腦風暴」候選上屏，上屏的詞會被加入用戶詞庫中，之後我們可以用 tnfb 來得到「頭腦風暴」這一候選了
    # 造出的詞與置頂詞是等同的
    panacea:
      # 加詞狀態提示
      prompt: "〔加词〕"
      # 加詞中綴引導符
      infix: "//"
      # 自由加詞模式開關，開啓此模式後，輸入「編碼A」//並空格上屏後會進入加詞狀態，此時可以連續地、不受束縛地輸入，再次按下x//空格退出加詞狀態，期間輸入的內容將會被記錄爲「編碼A」的新置頂詞
      # 此模式適合造一些混合詞，如「A4紙」、「KOS-MOS」等
      freestyle: false

  # 「通用」字符集設置
  # 不影響「增廣」：增廣仍顯示*所有*字符
  #
  # both: 允許繁體和簡體同時顯示
  # simp: 只顯示簡化字
  # trad: 只顯示繁體字
  charset: both